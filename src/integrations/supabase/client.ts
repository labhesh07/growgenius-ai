
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qrxuhrtvvdgajihjqsfo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFyeHVocnR2dmRnYWppaGpxc2ZvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwMDE2OTMsImV4cCI6MjA1OTU3NzY5M30.WU5dx2lvFMkfVnlaXSuT8GXwsrGDvIjiWfqriuahD9Y";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'x-application-name': 'plant-disease-detector'
    }
  }
});

// We're removing the automatic creation of buckets on client-side since
// anonymous users don't have permissions to create buckets.
// This should be done through SQL migrations instead.

// Helper function to upload a plant image to storage
export const uploadPlantImage = async (file: File, userId?: string) => {
  try {
    // Generate a unique file path
    const fileExt = file.name.split('.').pop();
    const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;
    const filePath = userId 
      ? `users/${userId}/plants/${fileName}`
      : `public/plants/${fileName}`;

    // Upload the file to Supabase Storage
    const { data, error } = await supabase.storage
      .from('plants')
      .upload(filePath, file);

    if (error) {
      throw error;
    }
    
    // Get the public URL for the uploaded file
    const { data: { publicUrl } } = supabase.storage
      .from('plants')
      .getPublicUrl(filePath);
      
    return { publicUrl, filePath };
  } catch (error) {
    console.error('Error uploading image:', error);
    throw error;
  }
};
